<?php
/**
 * @file
 * Code for the 4Prima registration feature.
 */

include_once 'prima_registration.features.inc';

/**
 * Implements hook_block_info().
 */
function prima_registration_block_info() {
  $blocks['check_registration'] = array(
    'info' => t('Check registration block'),
    'status' => 1,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'node/187',
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view()
 *
 * @param string $delta Block delta (block identifier)
 * @return array
 */
function prima_registration_block_view($delta = '') {
  switch($delta) {
    case 'check_registration':
      if(user_access('access content')) {
        $form = drupal_get_form('prima_registration_block_check_registration_form');
        $markup = '<div></div>';
        $markup .= drupal_render($form);
        $block['content'] = $markup;
        //$block['content'] = drupal_render(drupal_get_form('prima_registration_block_check_registration_form'));
        return $block;
      }
      break;
  }
}

/**
 * Check registration block form.
 */
function prima_registration_block_check_registration_form($form, &$form_state){
  $form = array();

  $form['#prefix'] = '<div id="check-registration-form-wrapper">';
  $form['#suffix'] = '</div>';
  $form['email'] = array(
    '#type' => 'textfield',
    '#size' => 30,
    '#title' => t('Check your email below:'),
    '#attributes' => array('placeholder' => t('E-mail address'), 'title' => t('E-mail address')),
  );
  if (user_is_anonymous()) {
    $form['captcha'] = array(
      '#type' => 'captcha',
      '#captcha_type' => 'default',
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Check'),
  );

  $form['#validate'] = array('prima_registration_block_check_registration_form_validate');
  $form['#submit'] = array('prima_registration_block_check_registration_form_submit');
  return $form;
}

/**
 * Check registration block form validate.
 */
function prima_registration_block_check_registration_form_validate($form, &$form_state) {
  $email = trim($form_state['values']['email']);
  if (strlen($email) != 0) {
    if (!valid_email_address($form_state['values']['email'])) {
      form_set_error('email_osh', t('E-mail address not valid.'));
    }
  }
  else {
    form_set_error('email', t('Please enter the e-mail address.'));
  }
  check_registration_reorder_error_messages();
}

/**
 * Check registration block form submit.
 */
function prima_registration_block_check_registration_form_submit($form, &$form_state) {
  $email = $form_state['values']['email'];
  $query = db_select('registration', 'r')
    ->condition('anon_mail', $email);
  $count = $query->countQuery()->execute()->fetchField();
  if($count > 0){
    drupal_set_message(t('<em>@email</em> is registered in our database.<p>If you want to remove your registration from our database, please send an email to <a href="mailto:info@semide.org" target="_top">info[at]semide.org</a></p>',array('@email' => $email)));
  }else{
    drupal_set_message(t('<em>@email</em> is not registered in our database.',array('@email' => $email)),'info');
  }
}
/**
 * Check registration block form utils.
 */
function check_registration_reorder_error_messages(){
  $error_messages = drupal_get_messages('error');

  if (isset($error_messages['error'])) {
    sort($error_messages['error']);

    foreach($error_messages['error'] as $idx => $error) {
      drupal_set_message($error,'error');
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter.
 */
function prima_registration_form_views_exposed_form_alter(&$form, &$form_state) {
  if($form['#id'] == 'views-exposed-form-administer-registrations-page'){

    $events_options = array('' => t('All'));

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'event');
    $result = $query->execute();
    if($result){
      $events = node_load_multiple(array_keys($result['node']));
      if($events){
        foreach($events as $event){
          $events_options[$event->nid] = $event->title;
        }
      }
    }
    $form['nid'] = array(
      '#type' => 'select',
      '#options' => $events_options,
    );

    $organizations_options = array('' => t('All'));

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'organization');
    $result = $query->execute();
    if($result){
      $organizartions = node_load_multiple(array_keys($result['node']));
      if($events){
        foreach($organizartions as $organization){
          $organizations_options[$organization->nid] = $organization->title;
        }
      }
    }
    $form['field_reg_organization_target_id'] = array(
      '#type' => 'select',
      '#options' => $organizations_options,
    );

    $event = !empty($form_state['input']['nid']) ? $form_state['input']['nid'] : 'all';
    $anon_email = !empty($form_state['input']['anon_mail']) ? $form_state['input']['anon_mail'] : 'all';
    $organization = !empty($form_state['input']['field_reg_organization_target_id']) ? $form_state['input']['field_reg_organization_target_id'] : 'all';
    $form['#prefix'] = '<a href="/node/'.$event.'/registrations/export/' . $anon_email. '/' . $organization . '" class="button">'.t('Export registrations to CSV').'</a>';
  }
  return $form;
}
